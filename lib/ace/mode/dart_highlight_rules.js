/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/*** This file was autogenerated from 
 * http://dart.googlecode.com/svn/trunk/dart/tools/utils/textmate/Dart.tmbundle/Syntaxes/Dart.tmLanguage
 *(UUID: 958518BC-799F-477A-99F9-5B28EBF230F6) */

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var DartHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = { start: 
       [ { token: 'meta.preprocessor.script.dart', regex: '^(#!.*)$' },
         { token: 'keyword.other.import.dart',
           regex: '#\\b(library|import|source|resource)\\b',
           push: 
            [ { include: '#strings' },
              { caseInsensitive: true,
                token: 'keyword.other.import.dart',
                regex: '\\b(prefix)\\s*:' },
              { token: 'punctuation.terminator.dart', regex: ';', next: 'pop' },
              { defaultToken: 'meta.declaration.dart' } ] },
         { include: '#comments' },
         { include: '#constants-and-special-vars' },
         { include: '#keywords' },
         { include: '#strings' } ],
      '#comments': 
       [ { token: 'punctuation.definition.comment.dart',
           regex: '/\\*\\*/' },
         { include: 'text.html.javadoc' },
         { include: '#comments-inline' } ],
      '#comments-inline': 
       [ { token: 'comment.block.dart',
           regex: '/\\*',
           push: 
            [ { token: 'comment.block.dart', regex: '\\*/', next: 'pop' },
              { defaultToken: 'comment.block.dart' } ] },
         { todo: 'fix grouping',
           token: 'comment.line.double-slash.dart',
           regex: '//.*$' } ],
      '#constants-and-special-vars': 
       [ { token: 'constant.language.dart',
           regex: '\\b(true|false|null)\\b' },
         { token: 'variable.language.dart', regex: '\\b(this|super)\\b' },
         { token: 'constant.numeric.dart',
           regex: '\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b' } ],
      '#keywords': 
       [ { token: 'keyword.cast.dart', regex: '\\bas\\b' },
         { token: 'keyword.control.catch-exception.dart',
           regex: '\\b(try|catch|finally|throw)\\b' },
         { token: 'keyword.control.ternary.dart', regex: '\\?|:' },
         { caseInsensitive: true,
           token: 'keyword.control.dart',
           regex: '\\b(break|case|continue|default|do|else|for|if|in|return|switch|while)\\b' },
         { token: 'keyword.control.new.dart', regex: '\\b(new)\\b' },
         { token: 'keyword.declaration.dart',
           regex: '\\b(abstract|class|extends|external|factory|implements|interface|get|native|operator|set|typedef)\\b' },
         { token: 'keyword.operator.dart', regex: '\\b(is\\!?)\\b' },
         { token: 'keyword.operator.bitwise.dart',
           regex: '(<<|>>>?|~|\\^|\\||&)' },
         { token: 'keyword.operator.assignment.bitwise.dart',
           regex: '((&|\\^|\\||<<|>>>?)=)' },
         { token: 'keyword.operator.comparison.dart',
           regex: '(===?|!==?|<=?|>=?)' },
         { token: 'keyword.operator.assignment.arithmetic.dart',
           regex: '(([+*/%-]|\\~)=)' },
         { token: 'keyword.operator.assignment.dart', regex: '(=)' },
         { token: 'keyword.operator.increment-decrement.dart',
           regex: '(\\-\\-|\\+\\+)' },
         { token: 'keyword.operator.arithmetic.dart',
           regex: '(\\-|\\+|\\*|\\/|\\~\\/|%)' },
         { token: 'keyword.operator.logical.dart',
           regex: '(!|&&|\\|\\|)' },
         { token: 'punctuation.terminator.dart', regex: ';' },
         { token: 'storage.modifier.dart',
           regex: '\\b(static|final|const)\\b' },
         { caseInsensitive: true,
           token: 'storage.type.primitive.dart',
           regex: '\\b(?:void|bool|num|int|double|dynamic|var|String)\\b' } ],
      '#string-interp': 
       [ { token: 'variable.parameter.dart',
           regex: '(\\$)(?:(\\w+)|(\\{)(\\w+)(\\}))' },
         { token: 'constant.character.escape.dart', regex: '\\\\.' } ],
      '#strings': 
       [ { token: 'string.quoted.triple.dart',
           regex: '@"""',
           push: 
            [ { token: 'string.quoted.triple.dart',
                regex: '"""(?!")',
                next: 'pop' },
              { defaultToken: 'string.quoted.triple.dart' } ] },
         { token: 'string.interpolated.triple.dart',
           regex: '"""',
           push: 
            [ { include: '#string-interp' },
              { token: 'string.interpolated.triple.dart',
                regex: '"""(?!")',
                next: 'pop' },
              { defaultToken: 'string.interpolated.triple.dart' } ] },
         { token: 'string.quoted.double.dart',
           regex: '@"',
           push: 
            [ { token: 'invalid.string.newline', regex: '$', next: 'pop' },
              { token: 'string.quoted.double.dart', regex: '"', next: 'pop' },
              { defaultToken: 'string.quoted.double.dart' } ] },
         { token: 'string.interpolated.double.dart',
           regex: '"',
           push: 
            [ { token: 'invalid.string.newline', regex: '$', next: 'pop' },
              { include: '#string-interp' },
              { token: 'string.interpolated.double.dart',
                regex: '"',
                next: 'pop' },
              { defaultToken: 'string.interpolated.double.dart' } ] },
         { token: 'string.quoted.single.dart',
           regex: '@\'',
           push: 
            [ { token: 'invalid.string.newline', regex: '$', next: 'pop' },
              { token: 'string.quoted.single.dart', regex: '\'', next: 'pop' },
              { defaultToken: 'string.quoted.single.dart' } ] },
         { token: 'string.interpolated.single.dart',
           regex: "'",
           push: 
            [ { token: 'invalid.string.newline', regex: '$', next: 'pop' },
              { include: '#string-interp' },
              { token: 'string.interpolated.single.dart',
                regex: "'",
                next: 'pop' },
              { defaultToken: 'string.interpolated.single.dart' } ] } ] }
    
    this.normalizeRules();
};

oop.inherits(DartHighlightRules, TextHighlightRules);

exports.DartHighlightRules = DartHighlightRules;
});